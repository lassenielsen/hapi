#include<console.pi>
#include<struct/list.pi>
#include<order.pi>
#include<succ.pi>

#define $unziplistresult(_elt) \
  1->2:$list(_elt)(2 of 1 pure,2); \
  1->2:$list(_elt)(2 of 1 pure,2); \
  $end;
#define $unziplist(_elt) \
  2->1:$list(_elt)(2 of 1 pure,2); \
  $unziplistresult(_elt)
#define $absunziplist \
  2: #elt; \
  $unziplist(#elt)
global $absunziplist unziplist(1 pure,2);
local pure service UnziplistService(unziplist (1 of 2) this) // {{{
( this>>#elt;
  local pure UnziplistSession($unziplistresult(#elt)(1 of 1 pure,2) this, $list(#elt)(2 of 1 pure,2) src, $list(#elt)(2 of 1 pure,2) dst1, $list(#elt)(2 of 1 pure,2) dst2) // {{{
  ( src[1]<<^pop;
    src[1]>>
    {^nil:
      this[2]<<dst1<<dst2;
     ^cons:
      src[1]>>v>>srctail;
      dst1[1]<<^cons<<v;
      UnziplistSession(this,srctail,dst2,dst1);
    }
  ) // }}}
  this[2]>>src;
  dst1=new list(2 of 2);
  dst1<<#elt;
  dst2=new list(2 of 2);
  dst2<<#elt;
  UnziplistSession(this,src,dst1,dst2);
) // }}}
|
#define $mergelists \
  2: #elt; \
  2->1:$order(#elt)(2 of 1 pure,2); \
  2->1:$list(#elt)(2 of 1 pure,2); \
  2->1:$list(#elt)(2 of 1 pure,2); \
  1->2:Bool; \
  $list(#elt)
global $mergelists mergelists(1 pure,2);
local pure service MergelistsService(mergelists (1 of 2) this) // {{{
( this>>#elt;
  local pure Merge($list(#elt)(2 of 1 pure,2) src1, $list(#elt)(2 of 1 pure,2) src2, $order(#elt)(2 of 1 pure,2) cmp, 1->2:Bool;$list(#elt)(1 of 1 pure,2) this) // {{{
  ( src1[1]<<^pop;
    src1[1]>>
    {^cons:
      src1[1]>>h1>>t1;
      src2[1]<<^pop;
      src2[1]>>
      {^cons:
        src2[1]>>h2>>t2;
        cmp[1]<<^leq<<h1<<h2;
        cmp[1]>>leq;
        local pure SubMerge($list(#elt)(2 of 1 pure,2) src1, $list(#elt)(2 of 1 pure,2) src2, $order(#elt)(2 of 1 pure,2) cmp, 1->2:Bool;$list(#elt)(1 of 1 pure,2) this, #elt head) // {{{
        ( merge=new mergelists(2 of 2);
          merge<<#elt;
          merge[1]<<cmp<<src1<<src2;
          merge[1]>>done;
          this[2]<<true;
          merge[1]<<^cons<<head<<^takeover<<this;
        ) // }}}
        if leq
        then t2[1]<<^cons<<h2;
             SubMerge(t1,t2,cmp,this,h1);
        else t1[1]<<^cons<<h1;
             SubMerge(t1,t2,cmp,this,h2);
       ^nil:
        this[2]<<true;
        t1[1]<<^cons<<h1<<^takeover<<this;
        cmp[1]<<^end;
      }
     ^nil:
      this[2]<<true;
      src2[1]<<^takeover<<this;
      cmp[1]<<^end;
    }
  ) // }}}
  this[2]>>cmp;
  this[2]>>l1;
  this[2]>>l2;
  Merge(l1,l2,cmp,this);
) // }}}
|
#define $abslistfun \
  2:#elt; \
  2->1:$order(#elt)(1 pure,2); \
  2->1:$list(#elt)(2 of 1 pure,2); \
  1->2:Bool; \
  $list(#elt)
global $abslistfun mergesort(1 pure,2);
local pure service MergesortService(mergesort (1 of 2) this) // {{{
( this>>#elt;
  this[2]>>cmp_ch;
  local pure MergesortSession(1->2:Bool;$list(#elt)(1 of 1 pure,2) this, $list(#elt)(2 of 1 pure,2) src)
  ( src[1]<<^get<<1;
    src[1]>>
    {^val: // at least 2 elements
      src[1]>>x;
      unzip=new unziplist(2 of 2);
      unzip<<#elt;
      unzip[1]<<src;
      unzip[1]>>src1>>src2;
      sort1=new mergesort(2 of 2);
      sort1<<#elt;
      sort2=new mergesort(2 of 2);
      sort2<<#elt;
      sort1[1]<<cmp_ch;
      sort1[1]<<src1;
      sort1[1]>>done1;
      sort2[1]<<cmp_ch;
      sort2[1]<<src2;
      sort2[1]>>done2;
      merge=new mergelists(2 of 2);
      merge<<#elt;
      cmp=new cmp_ch(2 of 2);
      merge[1]<<cmp<<sort1<<sort2;
      merge[1]>>done;
      this[2]<<true;
      merge[1]<<^takeover<<this;
     ^err: // less than 2 elements, hence ordered
      src[1]>>x;
      this[2]<<true;
      src[1]<<^takeover<<this;
    }
  )
  this[2]>>src;
  MergesortSession(this,src);
) // }}}
|
x=new range(2 of 2);
x<<Int;
s=new stdsucc_Int(2 of 2);
o=new stdorder_Int(2 of 2);
x[1]<<s<<o<<1<<10000;
y=new range(2 of 2);
y<<Int;
s=new stdsucc_Int(2 of 2);
o=new stdorder_Int(2 of 2);
y[1]<<s<<o<<1<<10000;
x[1]<<^append<<y;
//tmr=new timer(2 of 2);
//split=new unziplist(2 of 2);
//split<<Int;
//split[1]<<x;
//split[1]>>x1>>x2;
m=new mergesort(2 of 2);
m<<Int;
m[1]<<stdorder_Int<<x;
m[1]>>done;
//tmr[1]<<^read;
//tmr[1]>>splittime;
//tmr[1]<<^end;
//c=new console(2 of 2); c[1]<<^str<<"Split took "<<^flt<<splittime<<^str<<" seconds."<<^nl<<^end;
global PrintList($list(Int)(2 of 1 pure,2) l) // {{{
( l[1]<<^pop;
  l[1]>>
  {^nil:
   ^cons:
    l[1]>>h>>t;
    c=new console(2 of 2);
    c[1]<<^int<<h<<^nl<<^end;
    PrintList(t);
  }
) // }}}
PrintList(m);
//x1[1]<<^end;
//x2[1]<<^end;
