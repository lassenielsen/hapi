#include<console.pi>
#include<struct/list.pi>
#include<order.pi>
#include<succ.pi>

#define $abslistfun \
  2:#elt; \
  2->1:$order(#elt)(1 pure,2); \
  2->1:$list(#elt)(2 of 1 pure,2); \
  1->2:Bool; \
  $list(#elt)
global $abslistfun mergesort(1 pure,2);
local pure service MergesortService(mergesort (1 of 2) this) // {{{
( this>>#elt;
  this[2]>>cmp_ch;
  this[2]>>src;
  src[1]<<^get<<1;
  src[1]>>
  {^err: // Less than 2 elements - so already sorted!
    src[1]>>msg;
    this[2]<<true;
    src[1]<<^takeover<<this;
   ^val:
    // Split
    src[1]>>v;
    src[1]<<^unzip;
    src[1]>>src2;
    // Sort parts
    sort1=new mergesort(2 of 2);
    sort1<<#elt;
    sort2=new mergesort(2 of 2);
    sort2<<#elt;
    sort1[1]<<cmp_ch<<src;
    sort1[1]>>done1;
    sort2[1]<<cmp_ch<<src2;
    sort2[1]>>done2;
    // Merge
    sort1[1]<<^get<<0;
    sort1[1]>>
    {^err:
      sort1[1]>>msg;
      sort1[1]<<^end;
      this[2]<<true;
      sort2[1]<<^takeover<<this;
     ^val:
      sort1[1]>>v1;
      sort2[1]<<^get<<0;
      sort2[1]>>
      {^err:
        sort2[1]>>msg;
        sort2[1]<<^end;
        this[2]<<true;
        sort1[1]<<^takeover<<this;
       ^val:
        sort2[1]>>v2;
        cmp=new cmp_ch(2 of 2);
        cmp[1]<<^leq<<v1<<v2;
        cmp[1]>>leq;
        if leq
        then sort1[1]<<^merge<<cmp<<sort2;
             this[2]<<true;
             sort1[1]<<^takeover<<this;
        else sort2[1]<<^merge<<cmp<<sort1;
             this[2]<<true;
             sort2[1]<<^takeover<<this;
      }
    }
  }
) // }}}
|
x=new range(2 of 2);
x<<Int;
s=new stdsucc_Int(2 of 2);
o=new stdorder_Int(2 of 2);
x[1]<<s<<o<<1<<10000;
y=new range(2 of 2);
y<<Int;
s=new stdsucc_Int(2 of 2);
o=new stdorder_Int(2 of 2);
y[1]<<s<<o<<1<<10000;
x[1]<<^append<<y;
//tmr=new timer(2 of 2);
//split=new unziplist(2 of 2);
//split<<Int;
//split[1]<<x;
//split[1]>>x1>>x2;
m=new mergesort(2 of 2);
m<<Int;
m[1]<<stdorder_Int<<x;
m[1]>>done;
//tmr[1]<<^read;
//tmr[1]>>splittime;
//tmr[1]<<^end;
//c=new console(2 of 2); c[1]<<^str<<"Split took "<<^flt<<splittime<<^str<<" seconds."<<^nl<<^end;
global PrintList($list(Int)(2 of 1 pure,2) l) // {{{
( l[1]<<^pop;
  l[1]>>
  {^nil:
   ^cons:
    l[1]>>h>>t;
    c=new console(2 of 2);
    c[1]<<^int<<h<<^nl<<^end;
    PrintList(t);
  }
) // }}}
PrintList(m);
//x1[1]<<^end;
//x2[1]<<^end;
