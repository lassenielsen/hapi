//#include <console.pi>
// This example defines the interface of - and implements - an ordered list.
#define $intop \
  2->1:Int;\
  1->2:Int;\
  $end;
// The interface of a list {{{
#define $list \
  rec $list; \
  2->1\
  {^Insert: 2->1:Int;\
            $list;\
   ^Lookup: 2->1:Int;\
            1->2\
            {^NONE: $list;\
             ^SOME: 1->2:Int;\
                    $list;\
            }\
   ^Map: 2->1:$intop(1 pure, 2);\
         $list;\
   ^Delete: $end;\
  }
// }}}
// Declare channel (constructor) {{{
global $list list(1 pure, 2);
//global 2->1:Int;2->1:$list(2 of 1 pure,2);$list cons(1 pure,2); // }}}
// Implement ordered list {{{
local pure service NIL(list (1 of 2) this) // {{{
( global pure Cons($list(1 of 1 pure,2) this, $list(2 of 1 pure,2) next, Int v) // Behavior of non-empty list {{{
  ( this[2]>>
    {^Insert:
      next[1]<<^Insert;
      this[2]>>nVal;
      if v<=nVal
      then next[1]<<nVal;
           Cons(this,next,v);
      else next[1]<<v;
           Cons(this,next,nVal);
     ^Lookup:
      this[2]>>pos;
      if pos<=0
      then this[2]<<^SOME;
           this[2]<<v;
           Cons(this,next,v);
      else next[1]<<^Lookup;
           next[1]<<pos-1;
           next[1]>>
           {^SOME:
             this[2]<<^SOME;
             next[1]>>val;
             this[2]<<val;
             Cons(this,next,v);
            ^NONE:
             this[2]<<^NONE;
             Cons(this,next,v);
           }
       ^Map:
        this[2]>>fdef;
        f=new fdef(2 of 2);
        f[1]<<v;
        f[1]>>nVal;
        next[1]<<^Map;
        next[1]<<fdef;
        Cons(this,next,nVal); // Fixme: Order!!!
       ^Delete:
        next[1]<<^Delete;
    }
  ) // }}}
  local pure Nil($list(1 of 1 pure,2) this) // Behavior of empty list {{{
  ( this[2]>>
    {^Insert:
      this[2]>>val;
      s=new list(2 of 2);
      Cons(this,s,val);
     ^Lookup:
      this[2]>>pos;
      this[2]<<^NONE;
      Nil(this);
     ^Map:
      this[2]>>fdef;
      Nil(this);
     ^Delete:
    }
  ) // }}}
  Nil(this);
) // }}}
//global pure service CONS(cons (1 of 2) this) // {{{
//( this[2]>>next;
//  this[2]>>v;
//  Cons(this,next,v);
//) // }}}
| // Test application
  myList = new list(2 of 2); // Create myList as nil list
  myList[1]<<^Insert << 5;  // myList = [0:5]
  myList[1]<<^Insert << 2;  // myList = [0:2, 1:5]
  myList[1]<<^Insert << 7;  // myList = [0:2, 1:5, 2:7]
  myList[1]<<^Insert << 3;  // myList = [0:2, 1:3, 2:5, 3:7]
  myList[1]<<^Lookup << 2;  // Retrieve element with index 2
  myList[1]>>               // Returns ^SOME, 5
  {^NONE: myList[1]<<^Delete;
          //c=new console(2 of 2); c[1]<<^str<<"ERROR: Returned NONE" << ^nl << ^end;
   ^SOME: myList[1]>>val; myList[1]<<^Delete;
          //if val=5
          //then c=new console(2 of 2); c[1]<<^str<<"SUCCESS"<<^nl<<^end;
          //else c=new console(2 of 2); c[1]<<^str<<"ERROR: Did not return 5"<<^nl<<^end;
  }
