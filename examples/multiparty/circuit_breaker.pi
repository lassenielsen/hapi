// circuit_breaker protocol: Participants: 1 is API, 2 is Controller, 3 is Storage and 4 is User
#define $circuit_breaker \
  2->3: Int; /* Start */ \
  2->1: Int; /* Start */ \
  3->2 \
  {^HardPing: \
    $circuit_loop \
  }
#define $circuit_loop \
  rec $circuit_loop; \
  4->1 \
  {^Request: \
    1->2 \
    {^GetMode: \
      2->1 \
      {^Up: \
        2->3 \
        {^Up: \
          1->3 \
          {^Request: \
            3->1 \
            {^Response: \
              1->4 \
              {^Response: \
                $circuit_loop; \
              } \
            } \
          } \
        } \
       ^Failure: \
        2->3 \
        {^Failure: \
          2->3 \
          {^Restart: \
            1->4 \
            {^Failure: \
              $circuit_loop; \
            } \
          } \
        } \
       ^Stop: \
        2->3 \
        {^Stop: \
          1->4 \
          {^Stop: \
            $end; \
          } \
        } \
      } \
    } \
  }

global $circuit_breaker circuit_breaker(1,2,3,4);
local service API(circuit_breaker(1 of 4) this) // {{{
( this[2]>>n;
  local ApiLoop($circuit_loop(1 of 1,2,3,4) this) // {{{
  ( this[4]>>
    {^Request:
      this[2]<<^GetMode;
      this[2]>>
      {^Up:
        this[3]<<^Request;
        this[3]>>
        {^Response:
          this[4]<<^Response;
          ApiLoop(this);
        }
       ^Failure:
        this[4]<<^Failure;
        ApiLoop(this);
       ^Stop:
        this[4]<<^Stop;
      }
    }
  ) // }}}
  ApiLoop(this);
) // }}}
|
local service Controller(circuit_breaker(2 of 4) this) // {{{
( Int n=5; // What is start value?
  this[3]<<n;
  this[1]<<n;
  this[3]>>
  {^HardPing:
    local ControllerLoop($circuit_loop(2 of 1,2,3,4) this, Int n) // {{{
    ( this[1]>>
      {^GetMode:
        if 2<=n
        then this[1]<<^Up;
             this[3]<<^Up;
             ControllerLoop(this,n-1);
        else if 1<=n
        then this[1]<<^Failure;
             this[3]<<^Failure;
             this[3]<<^Restart;
             ControllerLoop(this,n-1);
        else this[1]<<^Stop;
             this[3]<<^Stop;
      }
    ) // }}}
    ControllerLoop(this,n);
  }
) // }}}
|
local service Storage(circuit_breaker(3 of 4) this) // {{{
( this[2]>>n;
  this[2]<<^HardPing;
  local StorageLoop($circuit_loop(3 of 1,2,3,4) this) // {{{
  ( this[2]>>
    {^Up:
      this[1]>>
      {^Request:
        this[1]<<^Response;
        StorageLoop(this);
      }
     ^Failure:
      this[2]>>
      {^Restart:
        StorageLoop(this);
      }
     ^Stop:
    }
  ) // }}}
  StorageLoop(this);
) // }}}
|
// USER
local UserLoop($circuit_loop(4 of 1,2,3,4) this) // {{{
( this[1]<<^Request;
  this[1]>>
  {^Response:
    UserLoop(this);
   ^Failure:
    UserLoop(this);
   ^Stop:
  }
) // }}}
cb = new circuit_breaker(4 of 4);
UserLoop(cb);
