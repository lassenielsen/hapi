#pragma once
#include<callable.pi>
#include<order.pi>
#include<convert.pi>
#define $abslist \
  2: #elt; \
  $list(#elt)
#define $list(_elt) \
  rec $list; \
  2->1 \
  {^get: \
    2->1: Int; \
    1->2 \
    {^val: \
      1->2: _elt; \
      $list; \
     ^err: \
      1->2: String; \
      $list; \
    } \
   ^set: \
    2->1: Int; \
    2->1: _elt; \
    $list; \
   ^length: \
    1->2: Int; \
    $list; \
   ^apply: \
    2->1: 2->1: _elt; 1->2: _elt; $end;(1 pure, 2); \
    $list; \
   ^insert: \
    2->1: Int; \
    2->1: _elt; \
    $list; \
   ^erase: \
    2->1: Int; \
    $list; \
   ^filter: \
    2->1: $callable(_elt,Bool)(2 of 1 pure,2); \
    $list; \
   ^cons: \
    2->1: _elt; \
    $list; \
   ^snoc: \
    2->1: _elt; \
    $list; \
   ^pop: \
    1->2 \
    {^nil: \
      $end; \
     ^cons: \
      1->2: _elt; \
      1->2: $list;(2 of 1 pure,2); \
      $end; \
    } \
   ^append: \
    2->1: $list;(2 of 1 pure,2); \
    $list; \
   ^unzip: \
    1->2: $list;(2 of 1 pure,2); \
    $list; \
   ^merge: \
    2->1: $order(_elt)(2 of 1 pure,2); \
    2->1: $list;(2 of 1 pure,2); \
    $list; \
   ^copy: \
    1->2: $list;(2 of 1 pure,2); \
    $list; \
   ^takeover: \
    2->1: $list;(1 of 1 pure,2); \
    $end; \
   ^end: \
    $end; \
  }

global $abslist list(1 pure,2);
local pure service List(list (1 of 2) s)
( s>>#elt;
  local pure Nil($list(#elt)(1 of 1 pure, 2) this)
  ( global pure Cons(#elt head, $list(#elt)(2 of 1 pure, 2) tail, $list(#elt)(1 of 1 pure,2) this)
    ( this[2]>>
      {^get:
        this[2]>>i;
        if i<=0
        then this[2]<<^val<<head;
             Cons(head,tail,this);
        else tail[1]<<^get<<i-1;
             tail[1]>>
             {^val:
               tail[1]>>v;
               this[2]<<^val<<v;
               Cons(head,tail,this);
              ^err:
               tail[1]>>msg;
               this[2]<<^err<<msg;
               Cons(head,tail,this);
             }
       ^set:
        this[2]>>i;
        this[2]>>v;
        if i<=0
        then Cons(v,tail,this);
        else tail[1]<<^set<<i-1<<v;
             Cons(head,tail,this);
       ^length:
        tail[1]<<^length;
        tail[1]>>l;
        this[2]<<l+1;
        Cons(head,tail,this);
       ^apply:
        this[2]>>fc;
        f = new fc(2 of 2);
        f[1]<<head;
        f[1]>>h;
        tail[1]<<^apply<<fc;
        Cons(h,tail,this);
       ^insert:
        this[2]>>i;
        this[2]>>h;
        if i<=0
        then global $list(#elt) l1,l2(1 pure,2);
             Cons(h,l2,this);
             |
             Cons(head,tail,l1);
        else tail[1]<<^insert<<i-1<<h;
             Cons(head,tail,this);
       ^erase:
        this[2]>>i;
        if i<=0
        then tail[1]<<^pop;
             tail[1]>>
             {^nil:
               Nil(this);
              ^cons:
               tail[1]>>h>>t;
               Cons(h,t,this);
             }
        else tail[1]<<^erase<<i-1;
             Cons(head,tail,this);
       ^filter:
        this[2]>>filter;
        filter[1]<<^call<<head;
        filter[1]>>keep;
        tail[1]<<^filter<<filter;
        if keep
        then Cons(head,tail,this);
        else tail[1]<<^pop;
             tail[1]>>
             {^nil:
               Nil(this);
              ^cons:
               tail[1]>>h>>t;
               Cons(h,t,this);
             }
       ^cons:
        this[2]>>h;
        global $list(#elt) l1, l2(1 pure,2);
        Cons(h,l2,this);
        |
        Cons(head,tail,l1);
       ^snoc:
        this[2]>>h;
        tail[1]<<^snoc<<h;
        Cons(head,tail,this);
       ^pop:
        this[2]<<^cons<<head<<tail;
       ^append:
        this[2]>>l;
        tail[1]<<^append<<l;
        Cons(head,tail,this);
       ^unzip:
        tail[1]<<^unzip;
        tail[1]>>t;
        this[2]<<tail;
        Cons(head,t,this);
       ^merge:
        this[2]>>cmp;
        this[2]>>that;
        that[1]<<^get<<0;
        that[1]>>
        {^err:
          that[1]>>msg;
          that[1]<<^end;
          cmp[1]<<^end;
          Cons(head,tail,this);
         ^val:
          that[1]>>v1;
          tail[1]<<^get<<0;
          tail[1]>>
          {^err:
            tail[1]>>msg;
            tail[1]<<^end;
            cmp[1]<<^end;
            Cons(head,that,this);
           ^val:
             tail[1]>>v2;
             cmp[1]<<^leq<<v1<<v2;
             cmp[1]>>res;
             if res
             then that[1]<<^merge<<cmp<<tail;
                  Cons(head,that,this);
             else tail[1]<<^merge<<cmp<<that;
                  Cons(head,tail,this);
          }
        }
       ^copy:
        tail[1]<<^copy;
        tail[1]>>t;
        cpy = new list(2 of 2);
        cpy<<#elt;
        cpy[1]<<^cons<<head<<^append<<t;
        this[2]<<cpy;
        Cons(head,tail,this);
       ^takeover:
        this[2]>>that;
        Cons(head,tail,that);
       ^end:
        tail[1]<<^end;
      }
    )
    this[2]>>
    {^get:
      this[2]>>i;
      this[2]<<^err<<"Index out of bounds";
      Nil(this);
     ^set:
      this[2]>>i;
      this[2]>>v;
      Nil(this); // Report error requires subsequent get
     ^length:
      this[2]<<0;
      Nil(this);
     ^apply:
      this[2]>>f;
      Nil(this);
     ^insert:
      this[2]>>i;
      this[2]>>v;
      if i<=0
      then tail = new list(2 of 2);
           tail<<#elt;
           Cons(v,tail,this);
      else Nil(this);
     ^erase:
      this[2]>>i;
      Nil(this);
     ^filter:
      this[2]>>filter;
      filter[1]<<^end;
      Nil(this);
     ^cons:
      this[2]>>head;
      global $list(#elt) l1,l2(1 pure,2);
      Cons(head,l2,this);
      |
      Nil(l1);
     ^snoc:
      this[2]>>head;
      global $list(#elt) l1,l2(1 pure,2);
      Cons(head,l2,this);
      |
      Nil(l1);
     ^pop:
      this[2]<<^nil;
     ^append:
      this[2]>>l;
      l[1]<<^takeover<<this;
     ^unzip:
      global $list(#elt) l1,l2(1 pure,2);
      this[2]<<l2;
      Nil(this);
      |
      Nil(l1);
     ^merge:
      this[2]>>cmp;
      cmp[1]<<^end;
      this[2]>>that;
      that[1]<<^takeover<<this;
     ^copy:
      cpy = new list(2 of 2);
      cpy<<#elt;
      this[2]<<cpy;
      Nil(this);
     ^takeover:
      this[2]>>that;
      Nil(that);
     ^end:
    }
  )
  Nil(s);
)
|
// Definition of protocol for the range service
#define $range \
  2:#t; /* list element type */ \
  2->1: $callable(#t,#t)(2 of 1 pure,2); /* next */ \
  2->1: $order(#t)(2 of 1 pure,2); /* compare */ \
  2->1: #t; /* from */ \
  2->1: #t; /* to */ \
  $list(#t)
global $range range(1 pure, 2);
local pure service Range(range (1 of 2) s)
( s>>#elt;
  s[2]>>next;
  s[2]>>cmp;
  s[2]>>from;
  s[2]>>to;
  cmp[1]<<^leq<<from<<to;
  cmp[1]>>leq;
  if leq
  then next[1]<<^call<<from;
       next[1]>>succ;
       tail=new range(2 of 2);
       tail<<#elt;
       tail[1]<<next<<cmp<<succ<<to;
       res=new list(2 of 2);
       res<<#elt;
       res[1]<<^cons<<from<<^append<<tail;
       res[1]<<^takeover<<s;
  else next[1]<<^end;
       cmp[1]<<^end;
       res=new list(2 of 2);
       res<<#elt;
       res[1]<<^takeover<<s;
)
|
// Definition of protocol for the printlist service
#define $printlist \
  2: #elt; \
  2->1: $convert(#elt,String)(1 pure,2); \
  2->1: $list(#elt)(2 of 1 pure,2); \
  2->1: $console(2 of 1,2); \
  $end;
// Decleration of the printlist service
global $printlist printlist(1,2);
// Implementation of the printlist service
local ServicePrintList()
( global s=new printlist(1 of 2);
  ServicePrintList();
  |
  s>>#elt;
  s[2]>>tostr;
  s[2]>>l;
  s[2]>>c;
  c[1]<<^str<<"[";
  local PrintElts($list(#elt)(2 of 1 pure,2) l, $console(2 of 1,2) c, Bool first)
  ( l[1]<<^pop;
    l[1]>>
    {^cons:
      String sep=if first then "" else ", ";
      c[1]<<^str<<sep;
      l[1]>>v>>tail;
      con=new tostr(2 of 2);
      con[1]<<v;
      con[1]>>
      {^Error:
        con[1]>>msg;
        c[1]<<^str<<"<ERROR>";
        PrintElts(tail,c,false);
       ^Ok:
        con[1]>>str;
        c[1]<<^str<<str;
        PrintElts(tail,c,false);
      }
     ^nil:
      c[1]<<^str<<"]"<<^nl<<^end;
    }
  )
  PrintElts(l,c,true);
)
ServicePrintList();
|
