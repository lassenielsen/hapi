#pragma once
HOSTHEADER("#include <time.h>");
HOSTHEADER("#include <unistd.h>");
HOSTHEADER("#include <sys/timeb.h>");
HOSTHEADER("double gettime() { struct timeb tb; ftime(&tb); double result = tb.millitm; result /= 1000; result+= tb.time; return result; }");

#define $timer rec $timer; \
  2->1 \
  {^reset: \
    $timer; \
   ^read: \
    1->2:Float; \
    $timer; \
   ^wait: \
    2->1:Float; \
    1->2:Bool; \
    $timer; \
   ^timestamp: \
    1->2:Float; \
    $timer; \
   ^sync: \
    2:#t; \
    2->1:#t; \
    $timer; \
   ^end: \
    $end; \
  }
global $timer timer(1,2);
local service TimeService(timer (1 of 2) t)
( local TimeSession($timer(1 of 1,2) t, Float start)
  ( t[2]>>
    {^reset:
      HOST("libpi::AssignNewValue(&",start,",new libpi::Float(gettime()));");
      TimeSession(t,start);
     ^read:
      Float now=0.0;
      HOST("libpi::AssignNewValue(&",now,",new libpi::Float(gettime()));");
      t[2]<<now-start;
      TimeSession(t,start);
     ^wait:  t[2]>>wait;
      HOST("{ double _w=mpf_get_d(",wait,"->GetValue()); usleep((useconds_t)(_w*1000000.0)); }");
      t[2]<<true;
      TimeSession(t,start);
     ^timestamp:
      Float now=0.0;
      HOST("libpi::AssignNewValue(&",now,",new libpi::Float(gettime()));");
      t[2]<<now;
      TimeSession(t,start);
     ^sync:
      t>>#t;
      t[2]>>val;
      TimeSession(t,start);
     ^end:
    }
  )
  Float start=0.0;
  HOST("libpi::AssignNewValue(&",start,",new libpi::Float(gettime()));");
  TimeSession(t,start);
)
|
