#pragma once

HOSTHEADER("#include <iostream>");
#define $console rec $console; \
  2->1 \
  {^str: 2->1:String; $console; \
   ^int: 2->1:Int;    $console; \
   ^flt: 2->1:Float;  $console; \
   ^nl:  $console; \
   ^input: \
   2->1 \
   {^str: 1->2:String; $console; \
    ^int: 1->2:Int;    $console; \
   } \
   ^end:  $end; \
  }
global $console console(1,2);
local Console()
( s = new console(1 of 2);
  local ConsoleSession($console(1 of 1,2) s)
  ( s[2]>>
    {^str:
      s[2]>>str;
      HOST("std::cout << ", str, "->GetValue() << std::flush;");
      ConsoleSession(s);
     ^int:
      s[2]>>i;
      HOST("std::cout << ", i, "->ToString() << std::flush;");
      ConsoleSession(s);
     ^flt:
      s[2]>>f;
      HOST("std::cout << ", f, "->ToString() << std::flush;");
      ConsoleSession(s);
     ^nl:
      HOST("std::cout << std::endl;");
      ConsoleSession(s);
     ^input:
      s[2]>>
      {^str:
        String val="";
        HOST("{ std::string _s; std::cin >> _s; ", val, "=new libpi::String(_s); }");
        s[2]<<val;
        ConsoleSession(s);
       ^int:
        Int val=0;
        HOST("{ long _l; std::cin >> _l; ", val, "=new libpi::Int(_l); }");
        s[2]<<val;
        ConsoleSession(s);
      }
     ^end:
      Console();
    }
  )
  ConsoleSession(s);
)
Console(); |
